import json


stringg = "```json\n{\n  \"summary\": [\n    {\n      \"heading\": \"Cloud Services and Web Service Architecture\",\n      \"content\": \"Web service architecture is a structured approach to designing and building web services that allow applications to communicate over a network using standard protocols like HTTP. Core components include Service Provider, Service Consumer, Service Registry, Communication Protocols, and Service Description.\"\n    },\n    {\n      \"heading\": \"Web Services: Definition and Key Features\",\n      \"content\": \"A web service is a software system that enables machine-to-machine communication over a network, using standard web protocols. Key features include Interoperability, Standard Protocols (HTTP, HTTPS, SOAP, REST), XML/JSON data exchange, Platform Independence, and Network Accessibility.\"\n    },\n    {\n      \"heading\": \"Types of Web Services: SOAP vs. REST\",\n      \"content\": \"There are two main types of web services: SOAP (Simple Object Access Protocol), which uses XML for communication and supports stronger security standards but is heavier and more complex, and REST (Representational State Transfer), an architectural style that typically uses HTTP methods and is lightweight, scalable, and easy to implement.\"\n    },\n    {\n      \"heading\": \"Web Service Authentication\",\n      \"content\": \"Web service authentication is the process of verifying the identity of users or systems before they can access a web service. Different authentication mechanisms can be implemented depending on the type of web service (SOAP or REST).\"\n    },\n    {\n      \"heading\": \"Web Service Authentication Methods\",\n      \"content\": \"Several authentication methods exist, including HTTP Basic Authentication (simple but insecure), OAuth (token-based, secure, and scalable), API Key Authentication (simple but less secure), SAML (for enterprise-level services), and Digest Authentication (more secure than basic).\"\n    },\n    {\n      \"heading\": \"Key Technologies for Deploying Web Services\",\n      \"content\": \"Key technologies for deploying web services include Web Servers, Application Servers, Databases, API Gateways, Containerization Platforms, Load Balancers, CI/CD Pipeline Tools, Cloud Platforms, Security Technologies, and Monitoring and Logging Tools.\"\n    },\n    {\n      \"heading\": \"Key Processes Involved in Deploying Web Services\",\n      \"content\": \"Key processes in deploying web services involve Development, Testing, Containerization & Packaging, Continuous Integration (CI), Continuous Deployment (CD), Deployment to Cloud, Load Balancing and Scaling, Monitoring and Logging, Security, and Backup and Disaster Recovery.\"\n    },\n    {\n      \"heading\": \"Deploying a Web Service Inside a Cloud Architecture\",\n      \"content\": \"Cloud architecture involves deploying and managing services on cloud infrastructure like AWS, Azure, or GCP. Key steps include Infrastructure Setup (IaaS, PaaS, Serverless), Deployment Process, CI/CD Pipeline, Security Configuration, Auto Scaling and Load Balancing, Database and Storage, Monitoring and Logging, and Backup and Disaster Recovery. Cloud deployment offers scalability, cost efficiency, automation, flexibility, and security.\"\n    },\n    {\n      \"heading\": \"Deploying a Web Service Outside a Cloud Architecture\",\n      \"content\": \"Deploying a web service outside the cloud typically involves using on-premises infrastructure or third-party hosting services. Key steps include Infrastructure Setup (Physical Servers, VMs, Managed Hosting), Load Balancing, Networking, Database and Storage, Security Configuration, Monitoring and Logging, and Backup and Disaster Recovery. Non-cloud deployment offers full control, customization, and security.\"\n    },\n    {\n      \"heading\": \"Comparison of Cloud vs Non-Cloud Deployment\",\n      \"content\": \"The document compares cloud and non-cloud deployments across aspects like cost, scalability, management, maintenance, disaster recovery, customization, security, deployment speed, and elasticity. Cloud offers pay-as-you-go pricing and managed services, while non-cloud provides full control but requires more manual management.\"\n    },\n    {\n      \"heading\": \"Service-Oriented Architecture (SOA)\",\n      \"content\": \"Service-Oriented Architecture (SOA) is a design pattern where software components, called services, are made available to other components over a network. Characteristics include Loose Coupling, Interoperability, Reusability, Abstraction, Discoverability, and Statelessness. SOA is suitable for enterprise applications and B2B integrations.\"\n    },\n    {\n      \"heading\": \"Primitive SOA vs Contemporary SOA\",\n      \"content\": \"Primitive SOA was characterized by basic service interactions, limited interoperability, and monolithic integration, often using XML/SOAP. Contemporary SOA has adopted modern practices like microservices, asynchronous messaging, cloud-native technologies, and DevOps, allowing for scalable, flexible, and resilient service-oriented systems.\"\n    },\n    {\n      \"heading\": \"Client-Server Architecture\",\n      \"content\": \"Client-server architecture is an early model for network-based computing where workload is distributed between servers and clients. It features a Two-Tier Architecture, Tight Coupling, Synchronous Communication, and a Centralized Server.  It is suitable for small to medium applications.\"\n    },\n    {\n      \"heading\": \"Distributed Internet Architecture\",\n      \"content\": \"Distributed internet architecture is more complex and designed to handle a wider distribution of components. It features a Multi-Tier Architecture, Decentralized Components, Loose Coupling and Scalability, Synchronous and Asynchronous Communication, and Cloud and Web Integration. It is well-suited for web applications and highly scalable systems.\"\n    },\n    {\n      \"heading\": \"Comparison of Architectures\",\n      \"content\": \"The document compares Client-Server, Distributed Internet, and SOA architectures based on structure, coupling, scalability, communication, reusability, governance, common use cases, and development complexity.\"\n    }\n  ],\n  \"questions\": [\n    {\n      \"question\": \"What is web service architecture?\"\n    },\n    {\n      \"question\": \"What are the core components of web service architecture?\"\n    },\n    {\n      \"question\": \"Explain the role of the Service Provider in web service architecture.\"\n    },\n    {\n      \"question\": \"What is the function of a Service Registry in web service architecture?\"\n    },\n    {\n      \"question\": \"What protocols are commonly used for communication between service providers and consumers?\"\n    },\n    {\n      \"question\": \"What is a service description and what is its purpose?\"\n    },\n    {\n      \"question\": \"What is a web service?\"\n    },\n    {\n      \"question\": \"What is interoperability in the context of web services?\"\n    },\n    {\n      \"question\": \"What are some standard protocols used by web services?\"\n    },\n    {\n      \"question\": \"What data formats are commonly used in web services?\"\n    },\n    {\n      \"question\": \"What are the two main types of web services?\"\n    },\n    {\n      \"question\": \"What is SOAP and what are its advantages and disadvantages?\"\n    },\n    {\n      \"question\": \"What is REST and what are its advantages and disadvantages?\"\n    },\n    {\n      \"question\": \"Explain the differences between SOAP and REST web services.\"\n    },\n    {\n      \"question\": \"What is web service authentication?\"\n    },\n    {\n      \"question\": \"Why is authentication important for web services?\"\n    },\n    {\n      \"question\": \"What are some common web service authentication methods?\"\n    },\n    {\n      \"question\": \"Explain how HTTP Basic Authentication works and what are its limitations?\"\n    },\n    {\n      \"question\": \"What is OAuth and how does it provide secure access to resources?\"\n    },\n    {\n      \"question\": \"What is API Key Authentication and what are its advantages and disadvantages?\"\n    },\n    {\n      \"question\": \"What is SAML and when is it suitable for use?\"\n    },\n    {\n      \"question\": \"What is Digest Authentication and how does it differ from Basic Authentication?\"\n    },\n    {\n      \"question\": \"Name some key technologies used for deploying web services.\"\n    },\n    {\n      \"question\": \"What is the purpose of a web server in deploying web services?\"\n    },\n    {\n      \"question\": \"What is the role of an application server in deploying web services?\"\n    },\n    {\n      \"question\": \"Why is a database important for web services?\"\n    },\n    {\n      \"question\": \"What is an API Gateway and what are its functions?\"\n    },\n    {\n      \"question\": \"What are containerization platforms and why are they used for deploying web services?\"\n    },\n    {\n      \"question\": \"What is a load balancer and how does it improve web service performance?\"\n    },\n    {\n      \"question\": \"What is a CI/CD pipeline and how does it automate web service deployment?\"\n    },\n    {\n      \"question\": \"How do cloud platforms facilitate web service deployment?\"\n    },\n    {\n      \"question\": \"Why are security technologies important for web services?\"\n    },\n    {\n      \"question\": \"What is the purpose of monitoring and logging tools in web service deployment?\"\n    },\n    {\n      \"question\": \"What are the key processes involved in deploying web services?\"\n    },\n    {\n      \"question\": \"What is continuous integration (CI) and why is it used in web service deployment?\"\n    },\n    {\n      \"question\": \"What is continuous deployment (CD) and how does it automate deployment?\"\n    },\n    {\n      \"question\": \"Explain the advantages of deploying a web service inside a cloud architecture.\"\n    },\n    {\n      \"question\": \"What are the key steps for deploying a web service inside a cloud architecture?\"\n    },\n    {\n      \"question\": \"What is Infrastructure as a Service (IaaS)?\"\n    },\n    {\n      \"question\": \"What is Platform as a Service (PaaS)?\"\n    },\n    {\n      \"question\": \"What are the advantages of non-cloud deployment of a web service?\"\n    },\n    {\n      \"question\": \"What are the disadvantages of non-cloud deployment of a web service?\"\n    },\n    {\n      \"question\": \"What is SOA and what are its characteristics?\"\n    },\n    {\n      \"question\": \"Explain the concept of loose coupling in SOA.\"\n    },\n    {\n      \"question\": \"What are the differences between primitive and contemporary SOA?\"\n    },\n    {\n      \"question\": \"What are the characteristics of Client-Server Architecture?\"\n    },\n     {\n      \"question\": \"What are the characteristics of Distributed Internet Architecture?\"\n    },\n    {\n      \"question\": \"When is Client-Server Architecture suitable?\"\n    },\n    {\n      \"question\": \"When is Distributed Internet Architecture suitable?\"\n    },\n    {\n      \"question\": \"How does SOA compare to Client-Server and Distributed Internet Architecture?\"\n    }\n  ]\n}\n```"
s1 = stringg.replace("```json\n", "")
s2 = s1.replace("```", "")
print(s2)
print(type(s2))
x = json.loads(s2)
with open('output.json', 'w') as outfile:
    json.dump(x, outfile, indent=2)


# def convert_string_to_json(string):
#     try:
#         return json.loads(string)
#     except json.JSONDecodeError as e:
#         print(f"Error decoding JSON: {e}")
#         return None
